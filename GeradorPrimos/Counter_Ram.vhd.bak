library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.NUMERIC_STD.all;


library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.NUMERIC_STD.all;

entity Counter_Ram is
	port(adress 	 : in std_logic_vector(7 downto 0);
		  reset  	 : in std_logic;
		  clk	   	 : in std_logic;
		  enable 	 : in std_logic;
		  counterValue : out std_logic_vector(7 downto 0));
end Counter_3;


architecture Behavioral of Counter_3 is
	
	signal s_counterValue: unsigned(9 downto 0) := to_unsigned(0,8);


begin
	
	process(clk)
	
	begin
	
		if (rising_edge(clk)) then
			if (reset = '1') then
				s_counterValue <= (others => '0');
			elsif (enable = '1') then
				if(s_counterValue < unsigned(adress)) then
					s_counterValue <= s_counterValue + 1;
				end if;
			end if;
		end if;
	
	end process;
	
	counterValue <= std_logic_vector(s_counterValue);
end Behavioral;